name: Service Deploy

on:
  push:
    branches: [master]

jobs:
  docker:
    runs-on: ubuntu-latest
    name: Push docker image
    steps:
      - name: App version
        run: echo "Picked the app version ${GITHUB_SHA}"

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Publish to Registry
        uses: docker/build-push-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: "${{ secrets.DOCKER_USERNAME }}/voice-to-text-bot/voice-to-speech-app"
          tag_with_sha: true
          build_args: APP_VERSION=${{ github.sha }}

  heroku-master:
    runs-on: ubuntu-latest
    name: Deploy to Heroku Master account
    steps:
      - name: App version
        run: echo "Picked the app version ${GITHUB_SHA}"

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Docker login
        run: echo ${{ env.D_PWD }} | docker login --username=${{ env.D_LOGIN }} ${{ env.D_REGISTRY }} --password-stdin
        env:
          D_LOGIN: ${{ secrets.HEROKU_EMAIL }}
          D_PWD: ${{ secrets.HEROKU_API_KEY }}
          D_REGISTRY: registry.heroku.com

      - name: Push docker image
        run: heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }} --arg APP_VERSION=${{ env.D_VERSION }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: push
          D_NAME: ${{ secrets.HEROKU_APP_MASTER }}
          D_VERSION: ${{ github.sha }}

      - name: Release docker image
        run: heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: release
          D_NAME: ${{ secrets.HEROKU_APP_MASTER }}

  heroku-slave:
    runs-on: ubuntu-latest
    name: Deploy to Heroku Slave account
    needs: heroku-master
    steps:
      - name: App version
        run: echo "Picked the app version ${GITHUB_SHA}"

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Read NodeJS version from .nvmrc
        id: node-version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./.nvmrc
          trim: true

      - name: Setup NodeJS using the obtained nvm version
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node-version.outputs.content }}

      - name: Docker login
        run: echo ${{ env.D_PWD }} | docker login --username=${{ env.D_LOGIN }} ${{ env.D_REGISTRY }} --password-stdin
        env:
          D_LOGIN: ${{ secrets.HEROKU_EMAIL }}
          D_PWD: ${{ secrets.HEROKU_API_KEY }}
          D_REGISTRY: registry.heroku.com

      - name: Push docker image
        run: heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }} --arg APP_VERSION=${{ env.D_VERSION }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: push
          D_NAME: ${{ secrets.HEROKU_APP_SLAVE }}
          D_VERSION: ${{ github.sha }}

      - name: Release docker image
        run: heroku container:${{ env.D_ACTION }} web --app ${{ env.D_NAME }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          D_ACTION: release
          D_NAME: ${{ secrets.HEROKU_APP_SLAVE }}
